2023/10/21
●Introduction

ORDER BY 句を使用して結果の順序を変更する方法を学び、日付に順序を適用することで一般的な使用例を探ります。

●ORDER BY

ORDER BYは通常、クエリの最後の節で、クエリの残りの部分で返される結果を並べ替えます。
行がIDカラムで並べられていないことに注意してください。これは以下のクエリですぐに修正できます。

''''''''''''
query = SELECT ID,Name,Animal
        FROM `bigquery-public-data.pet_records.pets`
        ORDER BY ID
''''''''''''

ORDER BY句は、結果をアルファベット順に表示するテキストを含むカラムに対しても機能する。

''''''''''''
query = SELECT ID,Name,Animal
        FROM `bigquery-public-data.pet_records.pets`
        ORDER BY Animal
''''''''''''

DESC引数（'descending'の略）を使って順序を逆にすることができます。
次のクエリは、Animalカラムでテーブルをソートし、アルファベット順で最後の値を最初に返します。

''''''''''''
query = SELECT ID,Name,Animal
        FROM `bigquery-public-data.pet_records.pets`
        ORDER BY Animal DESC
''''''''''''

●Dates

次に日付について説明します。日付は実際のデータベースで非常に頻繁に登場するからです。
BigQueryでは、日付をDATEとして格納する方法とDATETIMEとして格納する方法があります。

DATE形式では、まず年、次に月、そして日の順になります。以下のようになります：

YYYY-[M]M-[D]D

・YYYY：4桁の年
・[M]M：1桁または2桁の月
・[D]D：1桁または2桁の日

DATETIMEフォーマットは日付フォーマットのようなものだが......最後に時間が追加される。

●EXTRACT

年や日など、日付の一部を調べたいことがよくある。このような場合はEXTRACTを使用します。

以下のクエリは2つのカラムを返し、カラムDayはpets_with_dateテーブルのDateカラムの各エントリーに対応する日を含む：

''''''''''''
query = SELECT Name,EXTRACT(Day from Date) AS Day
        FROM `bigquery-public-data.pet_records.pets`
''''''''''''

SQLは日付に関して非常に賢く、セルの一部を抽出する以上の情報を求めることができます。
例えば、このクエリはDateカラムの各日付について、年の週（1～53の間）だけを1つのカラムに返します：

''''''''''''
query = SELECT Name,EXTRACT(Week from Date) AS Week
        FROM `bigquery-public-data.pet_records.pets`
''''''''''''

●Example: Which day of the week has the most fatal motor accidents?

少なくとも1人が死亡した米国内の交通事故に関する情報を含む、米国交通事故死亡記録データベースを使用してみましょう。
accident_2015テーブルを調査します。

In[1]:
from google.cloud import bigquery

# Create a "Client" object
client = bigquery.Client()

# Construct a reference to the "nhtsa_traffic_fatalities" dataset
dataset_ref = client.dataset("nhtsa_traffic_fatalities", project="bigquery-public-data")

# API request - fetch the dataset
dataset = client.get_dataset(dataset_ref)

# Construct a reference to the "accident_2015" table
table_ref = dataset_ref.table("accident_2015")

# API request - fetch the table
table = client.get_table(table_ref)

# Preview the first five lines of the "accident_2015" table
client.list_rows(table, max_results=5).to_dataframe()

Out[1]:
	state_number	state_name	consecutive_number	number_of_vehicle_forms_submitted_all	number_of_motor_vehicles_in_transport_mvit
1	39	Ohio	390099	7	
2	49	Utah	490123	16	
3	48	Texas	481184	6	
4	41	Oregon	410333	11	

5 rows × 70 columns

この表を使って、曜日によって事故件数がどのように変化するかを調べてみよう。なぜなら

・consecutive_numberカラムには、各事故に固有のIDが格納されている。
・timestamp_of_crash列には、事故の日付がDATETIME形式で格納されている、

以下のことができる：
・timestamp_of_crashカラムから曜日（以下のクエリではday_of_weekとして）を抽出する。
・曜日をGROUP BYし、sequential_numberカラムをCOUNTして各曜日の事故件数を決定する。

次に、ORDER BY句でテーブルをソートし、事故件数の多い日を最初に返します。

In[2]:
# Query to find out the number of accidents for each day of the week
query = """
        SELECT COUNT(consecutive_number) AS num_accidents, 
               EXTRACT(DAYOFWEEK FROM timestamp_of_crash) AS day_of_week
        FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`
        GROUP BY day_of_week
        ORDER BY num_accidents DESC
        """


































