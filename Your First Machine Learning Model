2023/10/08
●Selecting Data for Modeling
import pandas as pd

melbourne_file_path = '../input/melbourne-housing-snapshot/melb_data.csv'
melbourne_data = pd.read_csv(melbourne_file_path) 
melbourne_data.columns

# Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',
#        'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',
#        'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude',
#        'Longtitude', 'Regionname', 'Propertycount'],
#       dtype='object')

melbourne_data = melbourne_data.dropna(axis=0)

●Selecting The Prediction Target
y = melbourne_data.Price

●Choosing "Features"
melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
X = melbourne_data[melbourne_features]

X.describe()
X.head()

●Building Your Model
You will use the scikit-learn library to create your models. When coding, this library is written as sklearn, 
as you will see in the sample code. Scikit-learn is easily the most popular library for modeling the types of data typically stored in DataFrames.

The steps to building and using a model are:

1.Define: What type of model will it be? A decision tree? Some other type of model? Some other parameters of the model type are specified too.
2.Fit: Capture patterns from provided data. This is the heart of modeling.
3.Predict: Just what it sounds like
4.Evaluate: Determine how accurate the model's predictions are.


from sklearn.tree import DecisionTreeRegressor

# Define model. Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)

# Fit model
melbourne_model.fit(X, y)

# DecisionTreeRegressor(random_state=1)

print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")
print(melbourne_model.predict(X.head()))
















